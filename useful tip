# 리스트 컴프리헨션 (짧고 간결하게 코드를 짤 수 있다.)
# a = [i for i in range(10)]  # 리스트를 반복믄을 통해 선언하는 방법
# print(a)
#
# b = [i for i in range(20) if i % 2 == 1 ]
# print(b)
#
# c = [i*i for i in range(10)]
# print(c)
# # 일반적인 코드
# d = []
# for i in range(20):
#     if i % 2 == 1:
#         d.append(i)
# print(d)

# 리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
# 특히 N x M 크기의 2차원 리스트를 한 번에 초기화 해야할 때 유용
# Ex) array = [[0] * m fpr _in range(n)]
# 잘못된 예시) array = [[0] * m] * n
# 위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다.

n = 4
m = 3
# array = [[0]* m for _ in range(n)] # 좋은 예시)
array = [[0]*m]*n   # 나쁜 예시) array[1][1] = 5 를 해서 리스트 안의 값을 바꾸려했을 때
array[1][1] = 5     # array[0][1], [1][1],[2][1], [3][1] 이 모두 바뀐다.
print(array)


# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있습니다.
# 다만 문자열은 특정 인덱스의 값을 변경할 수는 없습니다.

# 튜플은 한 번 선언된 값을 변경할 수 없습니다.
# 튜플은 리스트에 비해 상대적으로 공간 효율적이다.

# // 튜플을 사용하면 좋은 경우 //
# 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
# - 최단 경로 알고리즘에서는 (비용, 노드 번호) 의 형태로 튜플 자료형을 자주 사용한다.
# 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
# - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다.
# 리스트보다 메모리를 효율적으로 사용해야 할 때

# // 사전 자료형 //
# 사전 자료형은 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형이다
# 사전 자료형은 키와 값의 쌍을 데이터로 가지며, 원하는 '변경 불가능한(Immutable) 자료형'을 키로 사용
# 파이썬의 사전 자료형은 해시 테이블(Hash Table)을 이용하므로 데이터의 조회 및 수정에 있어서
# O(1)의 시간에 처리 가능하다.(해시테이블: 키와 값으로 데이터를 저장하는 자료구조 중 하나, 빠르게
# 데이터를 검색할 수 있다.)

# data = dict()
# data['사과'] = 'Apple'
# data['바나나'] = 'Banana'
# data['코코넛'] = 'Coconut'
#
# print(data)
# if '사과' in data:
#     print("'사과'를 키로 가지는 데이터가 존재합니다.")

# // 사전 자료형 관련 메서드 //
# 사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드를 지원.
# - 키 데이터만 뽑아서 리스트로 이용할 때는 keys() 함수를 이용
# - 값 데이터만을 뽑아서 리스트로 이용할 때는 values() 함수를 이용

# data = dict()
# data['사과'] = 'Apple'
# data['바나나'] = 'Banana'
# data['코코넛'] = 'Coconut'
#
# key_list = data.keys()  # 키 데이터만을 담은 리스트
# value_list = data.values()  # 값 데이터만을 담음 리스트
# print(key_list)
# print(value_list)
#
# for key in key_list:
#     print(data[key])

# // 집합 자료형 //
# 집합의 특징 1. 중복을 허용하지 않는다 2. 순서가 없다.
# 집합은 리스트 혹은 문자열을 이용해서 초기화할 수 있다.
# - 이때 set()함수를 이용
# 혹은 중괄호 안에 각 원소를 콤마(,)를 기준으로 구분하여 삽입함으로써 초기화 할 수 있다.
# 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있다.


# 집합 자료형 초기화 방법 1
# data = set([1, 1, 2, 3, 4, 4, 5]) # 결과: {1,2,3,4,5}, 중복된 값은 처리됨
# print(data)

# 집합 자료형 초기화 방법 2
# data = {1, 1, 2, 3, 4, 4, 5}
# print(data)

# // 집합 자료형의 연산 //
# 합집합: 집합 A에 속하거나 B에 속하는 원소로 이루어진 집합
# 교집합: 집합 A에도 속하고 B에도 속하는 원소로 이루어진 집합
# 차집합: 집합 A의 원소 중에서 B에 속하지 않는 원소들로 이루어진 집합

# a = set([1, 2, 3, 4, 5, ])
# b = set([3, 4, 5, 6, 7])
#
# print(a | b)    # 합집합
# print(a & b)    # 교집합
# print(a - b)    # 차집합

# 집합 자료형 관련 함수
# data = set([1, 2, 3])
# print(data)
#
# data.add(4) # 새로운 원소 추가
# print(data)
# data.update([5, 6]) # 새로운 원소 여러 개 추가
# print(data)
# data.remove(3)  # 특정한 값을 갖는 원소 삭제
# print(data)

# // 사전 자료형과 집합 자료형의 특징 //
# 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있다.
# 사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다.
# 사전의 키 혹은 집합의 원소를 이용해 O(1)의 시간 복잡도를 조회 가능

# // 기본 입출력 //
# 모든 프로그램은 적절한 (약속된) 입출력 양식을 가지고 있다.
# 프로그램 동작의 첫 번째 단계는 데이터를 입력 받거나 생성하는 것이다.

# // 조건문 //
# 조건문은 프로그램의 흐름을 제어하는 문법입니다.
# 들여쓰기: 탭을 사용하는 쪽과 공백 문자를 여러 번 사용하는 쪽으로 두 진영이 존재
# 파이썬 스타일 가이드라인에서는 4개의 공백 문자를 사용하는 것을 표준으로 설정하고 있다.(인지해두자)

# // 파이썬의 pass 키워드
# 아무것도 처리하고 싶지 않을 때 pass 키워드를 사용한다.

# score = 85
# if score >= 80:
#     pass    # 나중에 작성할 소스코드
# else:
#     print('성적이 80점 미만입니다.')
# print('프로그램을 종료합니다.')

# // 조건문의 간소화 //
# 굳이 줄바꿈을 하지 않고도 간략하게 표현가능
# score = 85
# if score >= 80: result = "Success"
# else: result = "Fail"
# print(result)
#
# score = 85
# result = "Success" if score >= 80 else "Fail"
# print(result)

# // 파이썬 조건문 내에서의 부등식 //
# 다른 프로그래밍 언어와 다르게 파이썬은 조건문 안에서 수학의 부등식을 그대로 사용가능
# Ex) x>0 and x<20 과 0 < x < 20 은 같은 결과를 반환

# 반복문에서의 무한 루프
# 무한 루프란 끊임없이 반복되는 반복 구문을 의미한다.
# - 반복문을 작성한 뒤에는 항상 반복문을 탈출할 수 있는지 확인한다.

# // 파이썬의 continue 키워드 //
# 반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행하고자 할 때 continue 를 사용
# 1부터 9까지의 홀수의 합을 구할 때
# result = 0
# for i in range(1,10):
#     if i % 2 == 0:
#         continue
#     result += i
# print(result)

# // global 키워드
# global 키워드로 변수를 지정하면 해당 함수에서는 지역 변수를 만들지 않고, 함수 바깥에 선언된 변수를
# 바로 참조하게 된다.
# a = 0
# def func():
#     global a
#     a += 1
# for i in range(10):
#     func()
# print(a)

# array = [1, 2, 3, 4, 5]
# def func():
#     array = [3,4,5]
#     array.append(6)
#     print(array)
# func()
# print(array)    # 변수 이름이 같고 함수를 선언한다면 지역변수를 우선순위로 한다.

# // 여러 개의 반환 값 //
# def operator(a, b):
#     add_var = a + b
#     subtract_var = a - b
#     multiply_var = a * b
#     divide_var = a / b
#     return add_var, subtract_var, multiply_var, divide_var
# a, b, c, d = operator(7,3)
# print(a, b, c, d)

# // 람다(이름없는 함수) 표현식 //
# def add(a, b):
#     return a + b
# print(add(3, 7))    # 일반적인 메서드 사용
# print((lambda a, b: a + b)(3, 7))   #람다 표현식으로 구현한 add() 메서드

# // 람다 표현식 예시: 내장 함수에서 자주 사용되는 람다 함수 //
# array = [('홍길동', 50), ('이순신',32),('아무개',74)]
# def my_key(x):  # 원소가 있을 때, 튜플이 있을 때
#     return x[1] # 두 번째 원소를 기준으로 한다.
# print(sorted(array, key=my_key))
# print(sorted(array, key = lambda x: x[1]))

# // 람다 표현식 예시: 여러 개의 리스트에 적용 //
# list1 = [1,2,3,4,5]
# list2 = [6, 7, 8, 9, 10]
# result = map(lambda a, b: a + b, list1, list2)
# print(list(result))

# 실전에서 유용한 표준 라이브러리
# 내장함수: 기본 입출력 함수부터 정렬 함수까지 기본적인 함수들을 제공
# itertools: 파이썬에서 반복되는 형태의 데이터를 처리하기 위한 유용한 기능들을 제공
# - 특히 순열과 조합 라이브러리는 코딩 테스트에서 자주 사용됨
# heapqa: 힙 자료구조를 제공
# bisect: 이진 탐색 기능 제공
# collections: 덱(deque), 카운터(Counter) 등의 유용한 자료구조를 포함
# math: 필수적인 수학적 기능을 제공
# - 팩토리얼, 제곱근, 최대공약수(GCD), 삼각함수 관련 함수부터 파이와 같은 상수를 포함

# result = sum([1,2,3,4,5])
# print(result)
# min_result = min(7, 3, 5, 2)
# max_result = max(7, 3, 5, 2)
# print(min_result,max_result)
# result = eval("(3+5)*7")    # 수식으로 표현된 하나의 식을 계산한 결과를 반환
# print(result)

# result = sorted([9, 1, 8, 5, 4])
# reverse_result = sorted([9, 1, 8, 5, 4], reverse=True)  # 반대로 정렬
# print(result)
# print(reverse_result)
# array = [('홍길동',35),('이순신',75),('아무개',50)]
# result = sorted(array, key = lambda x: x[1],reverse=True)
# print(result)

# // 순열과 조합 //
# 순열: 서로 다른 n개에서 서로 다른 r개를 선택하여 일렬로 나열하는 것
# {'A', 'B', 'C'} 에서 세 개를 선택하여 나열하는 경우: ABC, ACB, BAC, BCA, CAB, CBA
# 조합: 서로 다른 n개에서 순서에 상관 없이 서로 다른 r개를 선택하는 것
# {'A', 'B', 'C'}에서 순서를 고려하지 않고 두 개를 뽑는 경우: AB, AC, BC
# 순열의 수 n P r, 조합의 수 n C r

# from itertools import permutations
# data = ['A', 'B', 'C']
# result = list(permutations(data,3)) # 모든 순열 구하기
# print(result)
#
# from itertools import combinations
# result = list(combinations(data, 2))    # 조합
# print(result)
#
# from itertools import product
# result= list(product(data, repeat=2))   # 2개를 뽑는 모든 순열 구하기(중복허용)
# print(result)
#
# from itertools import combinations_with_replacement
# result = list(combinations_with_replacement(data, 2))   # 2개를 뽑는 모든 조합 구하기(중복허용)
# print(result)

# // Counter //
# 파이썬 collections 라이브러리의 Counter 는 등장 횟수를 세는 기능을 제공
# 리스트와 같은 반복 가능한 객체가 주어졌을 때 내부의 원소가 몇 번씩 등장했는지 알려줌
# from collections import Counter
# counter = Counter(['red','blue','red','green','blue','blue'])
# print(counter['blue'])
# print(counter['green'])
# print(dict(counter))

# 2023 / 10 / 13
