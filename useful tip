# 리스트 컴프리헨션 (짧고 간결하게 코드를 짤 수 있다.)
# a = [i for i in range(10)]  # 리스트를 반복믄을 통해 선언하는 방법
# print(a)
#
# b = [i for i in range(20) if i % 2 == 1 ]
# print(b)
#
# c = [i*i for i in range(10)]
# print(c)
# # 일반적인 코드
# d = []
# for i in range(20):
#     if i % 2 == 1:
#         d.append(i)
# print(d)

# 리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
# 특히 N x M 크기의 2차원 리스트를 한 번에 초기화 해야할 때 유용
# Ex) array = [[0] * m fpr _in range(n)]
# 잘못된 예시) array = [[0] * m] * n
# 위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다.

n = 4
m = 3
# array = [[0]* m for _ in range(n)] # 좋은 예시)
array = [[0]*m]*n   # 나쁜 예시) array[1][1] = 5 를 해서 리스트 안의 값을 바꾸려했을 때
array[1][1] = 5     # array[0][1], [1][1],[2][1], [3][1] 이 모두 바뀐다.
print(array)


# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있습니다.
# 다만 문자열은 특정 인덱스의 값을 변경할 수는 없습니다.

# 튜플은 한 번 선언된 값을 변경할 수 없습니다.
# 튜플은 리스트에 비해 상대적으로 공간 효율적이다.

# // 튜플을 사용하면 좋은 경우 //
# 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
# - 최단 경로 알고리즘에서는 (비용, 노드 번호) 의 형태로 튜플 자료형을 자주 사용한다.
# 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
# - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다.
# 리스트보다 메모리를 효율적으로 사용해야 할 때

