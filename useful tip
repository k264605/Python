# 리스트 컴프리헨션 (짧고 간결하게 코드를 짤 수 있다.)
# a = [i for i in range(10)]  # 리스트를 반복믄을 통해 선언하는 방법
# print(a)
#
# b = [i for i in range(20) if i % 2 == 1 ]
# print(b)
#
# c = [i*i for i in range(10)]
# print(c)
# # 일반적인 코드
# d = []
# for i in range(20):
#     if i % 2 == 1:
#         d.append(i)
# print(d)

# 리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
# 특히 N x M 크기의 2차원 리스트를 한 번에 초기화 해야할 때 유용
# Ex) array = [[0] * m fpr _in range(n)]
# 잘못된 예시) array = [[0] * m] * n
# 위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다.

n = 4
m = 3
# array = [[0]* m for _ in range(n)] # 좋은 예시)
array = [[0]*m]*n   # 나쁜 예시) array[1][1] = 5 를 해서 리스트 안의 값을 바꾸려했을 때
array[1][1] = 5     # array[0][1], [1][1],[2][1], [3][1] 이 모두 바뀐다.
print(array)


# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있습니다.
# 다만 문자열은 특정 인덱스의 값을 변경할 수는 없습니다.

# 튜플은 한 번 선언된 값을 변경할 수 없습니다.
# 튜플은 리스트에 비해 상대적으로 공간 효율적이다.

# // 튜플을 사용하면 좋은 경우 //
# 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
# - 최단 경로 알고리즘에서는 (비용, 노드 번호) 의 형태로 튜플 자료형을 자주 사용한다.
# 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
# - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다.
# 리스트보다 메모리를 효율적으로 사용해야 할 때

# // 사전 자료형 //
# 사전 자료형은 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형이다
# 사전 자료형은 키와 값의 쌍을 데이터로 가지며, 원하는 '변경 불가능한(Immutable) 자료형'을 키로 사용
# 파이썬의 사전 자료형은 해시 테이블(Hash Table)을 이용하므로 데이터의 조회 및 수정에 있어서
# O(1)의 시간에 처리 가능하다.(해시테이블: 키와 값으로 데이터를 저장하는 자료구조 중 하나, 빠르게
# 데이터를 검색할 수 있다.)

# data = dict()
# data['사과'] = 'Apple'
# data['바나나'] = 'Banana'
# data['코코넛'] = 'Coconut'
#
# print(data)
# if '사과' in data:
#     print("'사과'를 키로 가지는 데이터가 존재합니다.")

# // 사전 자료형 관련 메서드 //
# 사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드를 지원.
# - 키 데이터만 뽑아서 리스트로 이용할 때는 keys() 함수를 이용
# - 값 데이터만을 뽑아서 리스트로 이용할 때는 values() 함수를 이용

# data = dict()
# data['사과'] = 'Apple'
# data['바나나'] = 'Banana'
# data['코코넛'] = 'Coconut'
#
# key_list = data.keys()  # 키 데이터만을 담은 리스트
# value_list = data.values()  # 값 데이터만을 담음 리스트
# print(key_list)
# print(value_list)
#
# for key in key_list:
#     print(data[key])

# // 집합 자료형 //
# 집합의 특징 1. 중복을 허용하지 않는다 2. 순서가 없다.
# 집합은 리스트 혹은 문자열을 이용해서 초기화할 수 있다.
# - 이때 set()함수를 이용
# 혹은 중괄호 안에 각 원소를 콤마(,)를 기준으로 구분하여 삽입함으로써 초기화 할 수 있다.
# 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있다.


# 집합 자료형 초기화 방법 1
# data = set([1, 1, 2, 3, 4, 4, 5]) # 결과: {1,2,3,4,5}, 중복된 값은 처리됨
# print(data)

# 집합 자료형 초기화 방법 2
# data = {1, 1, 2, 3, 4, 4, 5}
# print(data)

# // 집합 자료형의 연산 //
# 합집합: 집합 A에 속하거나 B에 속하는 원소로 이루어진 집합
# 교집합: 집합 A에도 속하고 B에도 속하는 원소로 이루어진 집합
# 차집합: 집합 A의 원소 중에서 B에 속하지 않는 원소들로 이루어진 집합

# a = set([1, 2, 3, 4, 5, ])
# b = set([3, 4, 5, 6, 7])
#
# print(a | b)    # 합집합
# print(a & b)    # 교집합
# print(a - b)    # 차집합

# 집합 자료형 관련 함수
# data = set([1, 2, 3])
# print(data)
#
# data.add(4) # 새로운 원소 추가
# print(data)
# data.update([5, 6]) # 새로운 원소 여러 개 추가
# print(data)
# data.remove(3)  # 특정한 값을 갖는 원소 삭제
# print(data)

# // 사전 자료형과 집합 자료형의 특징 //
# 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있다.
# 사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다.
# 사전의 키 혹은 집합의 원소를 이용해 O(1)의 시간 복잡도를 조회 가능

# 2023/10/13 (금)

